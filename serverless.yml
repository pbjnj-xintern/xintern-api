# Welcome to Serverless!

service: xintern-reviews-api # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-2
  environment:
    MONGO_URL: "${self:custom.tokens.MONGO_URL}"

package:
  exclude:
    - tokens.yml

custom:
  stage: ${opt:stage, self:provider.stage}
  tokens: ${file(tokens.yml):${self:custom.stage}}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createReview:
    handler: api-handler.createReview
    events:
      - http:
          path: review
          method: POST
          cors: true

  updateReview:
    handler: api-handler.updateReview
    events:
      - http:
          path: review/{review_id}
          method: PATCH
          request:
            parameters:
              paths:
                review_id: true
          cors: true
  
  getFlaggedReviews:
    handler: api-handler.getFlaggedReviews
    events:
      - http:
          path: review/create
          method: GET
          cors: true

  updateCompany:
    handler: api-handler.updateCompany
    events:
      - http:
          path: review/{review_id}/company/{company_id}
          method: PATCH
          request:
            parameters:
              paths:
                review_id: true
                company_id: true
          cors: true

  updateRating:
    handler: api-handler.updateRating
    events:
      - http:
          path: review/{review_id}/rating/{rating_id}
          method: PATCH
          request:
            parameters:
              paths:
                review_id: true
                rating_id: true
          cors: true

  deleteReview:
    handler: api-handler.deleteReview
    events:
      - http:
          path: review/{review_id}
          method: DELETE
          request:
            parameters:
              paths:
                review_id: true
          cors: true
  getPopulatedReviews:
    handler: api-handler.getPopulatedReviews
    events:
      - http:
          path: populated-review/{review_id}
          method: GET
          request:
            parameters:
              paths:
                review_id: true
          cors: true

  deleteComment:
    handler: api-handler.deleteComment
    events:
      - http:
          path: comment/{comment_id}
          method: PATCH
          request:
            parameters:
              paths:
                comment_id: true
          cors: true

  createComment:
    handler: api-handler.createComment
    events:
      - http:
          path: review/{review_id}/comment
          method: POST
          request:
            parameters:
              paths:
                review_id: true
          cors: true
    
  updateComment:
    handler: api-handler.updateComment
    events:
      - http:
          path: review/{review_id}/comment/{comment_id}
          method: PATCH
          request:
            parameters:
              paths:
                review_id: true
                comment_id: true
          cors: true

  getTopCompanies:
    handler: api-handler.getTopCompanies
    events:
      - http:
          path: topCompanies
          method: GET
          cors: true

  # addCommentToReview:
  #     handler: api-handler.addCommentToReview
  #     events:
  #       - http:
  #           path: link-comment
  #           method: POST
  #           cors: true

  # addCompany:
  #   handler: api-handler.addCompany
  #   events:
  #     - http:
  #         path: company
  #         method: POST
  #         cors: true


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
